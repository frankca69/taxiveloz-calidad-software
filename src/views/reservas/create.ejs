
<div class="container mt-5">
    <h2>Crear Nueva Reserva</h2>

    <% if (typeof error !== 'undefined' && error) { %>
        <div class="alert alert-danger" role="alert">
            <%= error %>
        </div>
    <% } %>

    <form action="/reservas" method="POST">
        <div class="row">
            <div class="col-md-4 mb-3">
                <label for="fecha" class="form-label">Fecha*</label>
                <input type="date" class="form-control" id="fecha" name="fecha" value="<%= (typeof oldInput !== 'undefined' && oldInput.fecha) ? oldInput.fecha : '' %>" required>
            </div>
            <div class="col-md-4 mb-3">
                <label for="hora_inicio" class="form-label">Hora de Inicio*</label>
                <input type="time" class="form-control" id="hora_inicio" name="hora_inicio" value="<%= (typeof oldInput !== 'undefined' && oldInput.hora_inicio) ? oldInput.hora_inicio : '' %>" required>
            </div>
            <div class="col-md-4 mb-3">
                <label for="hora_fin" class="form-label">Hora de Fin*</label>
                <div class="input-group">
                    <input type="time" class="form-control" id="hora_fin" name="hora_fin" value="<%= (typeof oldInput !== 'undefined' && oldInput.hora_fin) ? oldInput.hora_fin : '' %>" required>
                    <button type="button" id="sugerir_hora_fin_btn" class="btn btn-outline-secondary btn-sm" title="Sugerir hora fin basada en duración del viaje + 30min tolerancia">Sugerir</button>
                </div>
            </div>
        </div>

        <div class="mb-3">
            <label for="chofer_id" class="form-label">Chofer y Vehículo*</label>
            <select class="form-select" id="chofer_id" name="chofer_id" required disabled>
                <option value="">Seleccione fecha y horas para ver choferes disponibles</option>
                <% if (typeof choferes !== 'undefined' && choferes.length > 0) { %>
                    <% choferes.forEach(chofer => { %>
                        <option value="<%= chofer.id %>" <%= (typeof oldInput !== 'undefined' && oldInput.chofer_id == chofer.id) ? 'selected' : '' %>>
                            <%= chofer.display_name %>
                        </option>
                    <% }); %>
                <% } %>
            </select>
            <div id="chofer_loading" style="display: none;">Consultando disponibilidad...</div>
        </div>

        <div class="mb-3">
            <label for="cliente_id" class="form-label">Cliente*</label>
            <select class="form-select" id="cliente_id" name="cliente_id" required>
                <option value="">Seleccione un cliente</option>
                <% clientes.forEach(cliente => { %>
                    <option value="<%= cliente.id %>" <%= (typeof oldInput !== 'undefined' && oldInput.cliente_id == cliente.id) ? 'selected' : '' %>>
                        <%= cliente.display_name %>
                    </option>
                <% }); %>
            </select>
            <div class="mt-1">
                <a href="/clientes/create?redirect_url=/reservas/create" class="btn btn-sm btn-outline-success">
                    <i class="fas fa-plus"></i> Nuevo Cliente
                </a>
            </div>
        </div>

        <div class="row">
            <div class="col-md-6 mb-3">
                <label for="origen" class="form-label">Origen*</label>
                <input type="text" class="form-control" id="origen" name="origen" value="<%= (typeof oldInput !== 'undefined' && oldInput.origen) ? oldInput.origen : '' %>" required>
            </div>

            <div class="col-md-6 mb-3">
                <label for="destino" class="form-label">Destino*</label>
                <input type="text" class="form-control" id="destino" name="destino" value="<%= (typeof oldInput !== 'undefined' && oldInput.destino) ? oldInput.destino : '' %>" required>
            </div>
        </div>

        <div id="map" style="height: 400px; width: 100%; margin-bottom: 1rem;"></div>

        <div class="row">
            <div class="col-md-4 mb-3">
                <div id="distancia" class="mb-1"></div>
                <input type="hidden" name="distancia_km" id="distancia_km_hidden">
            </div>
             <div class="col-md-4 mb-3">
                <div id="duracion_viaje" class="mb-1"></div>
            </div>
            <div class="col-md-4 mb-3">
                <label for="tarifa" class="form-label">Tarifa Calculada (S/)</label>
                <input type="number" step="0.01" class="form-control" id="tarifa" name="tarifa" value="<%= (typeof oldInput !== 'undefined' && oldInput.tarifa) ? oldInput.tarifa : '0.00' %>" readonly required>
            </div>
        </div>

        <div class="mb-3">
            <label for="tipo_pago" class="form-label">Tipo de Pago*</label>
            <select class="form-select" id="tipo_pago" name="tipo_pago" required>
                <option value="">Seleccione un tipo de pago</option>
                <option value="efectivo" <%= (typeof oldInput !== 'undefined' && oldInput.tipo_pago === 'efectivo') ? 'selected' : '' %>>Efectivo</option>
                <option value="virtual" <%= (typeof oldInput !== 'undefined' && oldInput.tipo_pago === 'virtual') ? 'selected' : '' %>>Virtual</option>
            </select>
        </div>

        <button type="submit" class="btn btn-primary">Guardar Reserva</button>
        <a href="/reservas" class="btn btn-secondary">Cancelar</a>
    </form>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        let map;
        let directionsService;
        let directionsRenderer;
        let autocompleteOrigen;
        let autocompleteDestino;

        const origenInput = document.getElementById('origen');
        const destinoInput = document.getElementById('destino');
        const distanciaDiv = document.getElementById('distancia');
        const tarifaInput = document.getElementById('tarifa');
        const distanciaHiddenInput = document.getElementById('distancia_km_hidden');
        const duracionViajeDiv = document.getElementById('duracion_viaje'); // Div para duración
        const horaInicioInput = document.getElementById('hora_inicio'); // Necesario para sugerir hora fin
        const horaFinInput = document.getElementById('hora_fin'); // Necesario para sugerir hora fin
        const sugerirHoraFinBtn = document.getElementById('sugerir_hora_fin_btn');

        let currentTravelDurationSeconds = 0; // Variable para almacenar la duración del viaje en segundos

        function initMap() {
            map = new google.maps.Map(document.getElementById('map'), {
                center: { lat: -12.046374, lng: -77.042793 }, // Centro inicial (Lima, Perú)
                zoom: 12
            });

            directionsService = new google.maps.DirectionsService();
            directionsRenderer = new google.maps.DirectionsRenderer();
            directionsRenderer.setMap(map);

            const autocompleteOptions = {
                // types: ['geocode'], // Opcional: restringe a resultados geográficos
                // componentRestrictions: { country: 'pe' } // Opcional: restringe a un país (ej. Perú)
            };

            autocompleteOrigen = new google.maps.places.Autocomplete(origenInput, autocompleteOptions);
            autocompleteDestino = new google.maps.places.Autocomplete(destinoInput, autocompleteOptions);

            autocompleteOrigen.addListener('place_changed', calculateAndDisplayRoute);
            autocompleteDestino.addListener('place_changed', calculateAndDisplayRoute);

            // Si hay valores iniciales (ej. por error de formulario), intentar calcular la ruta
            if (origenInput.value && destinoInput.value) {
                calculateAndDisplayRoute();
            }
        }

        function calculateAndDisplayRoute() {
            const origen = origenInput.value;
            const destino = destinoInput.value;

            if (origen && destino) {
                directionsService.route(
                    {
                        origin: origen,
                        destination: destino,
                        travelMode: google.maps.TravelMode.DRIVING
                    },
                    (response, status) => {
                        if (status === 'OK') {
                            directionsRenderer.setDirections(response);
                            const route = response.routes[0];
                            const leg = route.legs[0];
                            if (leg.distance && leg.duration) {
                                const distanciaKm = parseFloat((leg.distance.value / 1000).toFixed(2));
                                distanciaDiv.innerHTML = `<strong>Distancia:</strong> ${distanciaKm} km`;
                                distanciaHiddenInput.value = distanciaKm;
                                tarifaInput.value = calcularTarifaReserva(distanciaKm).toFixed(2);

                                currentTravelDurationSeconds = leg.duration.value; // Guardar duración en segundos
                                duracionViajeDiv.innerHTML = `<strong>Duración viaje:</strong> ${leg.duration.text}`;
                                sugerirHoraFinBtn.disabled = false; // Habilitar botón
                            } else {
                                distanciaDiv.innerHTML = 'No se pudo calcular distancia/duración.';
                                duracionViajeDiv.innerHTML = '';
                                distanciaHiddenInput.value = '';
                                currentTravelDurationSeconds = 0;
                                tarifaInput.value = calcularTarifaReserva(0).toFixed(2);
                                sugerirHoraFinBtn.disabled = true;
                            }
                        } else {
                            distanciaDiv.innerHTML = 'No se pudo calcular la ruta: ' + status;
                            duracionViajeDiv.innerHTML = '';
                            distanciaHiddenInput.value = '';
                            currentTravelDurationSeconds = 0;
                            tarifaInput.value = calcularTarifaReserva(0).toFixed(2);
                            sugerirHoraFinBtn.disabled = true;
                        }
                    }
                );
            } else {
                distanciaDiv.innerHTML = '';
                duracionViajeDiv.innerHTML = '';
                distanciaHiddenInput.value = '';
                currentTravelDurationSeconds = 0;
                tarifaInput.value = calcularTarifaReserva(0).toFixed(2);
                sugerirHoraFinBtn.disabled = true;
            }
        }

        // Llamar a initMap cuando la API de Google Maps esté cargada
        // Esto es importante si el script de la API se carga con 'defer'
        if (typeof google !== 'undefined' && typeof google.maps !== 'undefined') {
            initMap();
        } else {
            // Si la API no está lista, esperar al evento 'load' del script de la API.
            // Esto es un fallback, usualmente el script de la API se carga antes de DOMContentLoaded si está en <head>
            // o si no tiene 'async'/'defer'. Con 'defer', debería estar disponible.
            // Sin embargo, para mayor robustez, podrías añadir un callback global a la URL de la API:
            // &callback=initMapGlobal y definir function initMapGlobal() { initMap(); }
            // Por ahora, asumimos que estará listo o se cargará poco después.
            // Considera un enfoque más robusto para la inicialización si encuentras problemas.
            console.warn("Google Maps API might not be loaded yet. Trying to initialize map anyway or consider using a callback.");
            // Intentar inicializar de todas formas, o añadir un listener al script de la API
            // window.initMap = initMap; // Si usas &callback=initMap en la URL de la API
             // Una forma simple de reintentar después de un breve retraso:
            setTimeout(() => {
                if (typeof google !== 'undefined' && typeof google.maps !== 'undefined') {
                    initMap();
                } else {
                    console.error("Google Maps API failed to load.");
                    distanciaDiv.innerHTML = "Error al cargar Google Maps API.";
                }
            }, 1000);
        }


        const fechaInput = document.getElementById('fecha');
        // horaInicioInput y horaFinInput ya están definidos arriba para el botón sugerir
        // const fechaInput = document.getElementById('fecha'); // Eliminada declaración duplicada
        const choferSelect = document.getElementById('chofer_id');
        const choferLoadingDiv = document.getElementById('chofer_loading');

        sugerirHoraFinBtn.disabled = true; // Deshabilitar inicialmente

        sugerirHoraFinBtn.addEventListener('click', function() {
            if (!horaInicioInput.value || currentTravelDurationSeconds === 0) {
                alert('Por favor, seleccione una hora de inicio y calcule una ruta primero.');
                return;
            }

            const [hoursInicio, minutesInicio] = horaInicioInput.value.split(':').map(Number);
            const fechaInicio = new Date(); // Usamos una fecha cualquiera, solo importan horas/minutos
            fechaInicio.setHours(hoursInicio, minutesInicio, 0, 0);

            const toleranciaSegundos = 30 * 60; // 30 minutos en segundos
            const fechaFin = new Date(fechaInicio.getTime() + (currentTravelDurationSeconds + toleranciaSegundos) * 1000);

            const hoursFin = fechaFin.getHours().toString().padStart(2, '0');
            const minutesFin = fechaFin.getMinutes().toString().padStart(2, '0');

            horaFinInput.value = `${hoursFin}:${minutesFin}`;
        });


        function fetchChoferesDisponibles() {
            const fecha = fechaInput.value;
            const horaInicio = horaInicioInput.value;
            const horaFin = horaFinInput.value;

            if (fecha && horaInicio && horaFin) {
                choferSelect.disabled = true;
                choferSelect.innerHTML = '<option value="">Cargando choferes...</option>';
                choferLoadingDiv.style.display = 'block';

                // Validar que hora_fin sea posterior a hora_inicio
                if (horaFin <= horaInicio) {
                    choferSelect.innerHTML = '<option value="">Hora de fin debe ser posterior a hora de inicio</option>';
                    choferLoadingDiv.style.display = 'none';
                    // No habilitar el select si hay error de hora
                    return;
                }

                const queryParams = new URLSearchParams({ fecha, hora_inicio: horaInicio, hora_fin: horaFin });

                fetch(`/choferes/disponibles?${queryParams.toString()}`)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error(`Error HTTP: ${response.status}`);
                        }
                        return response.json();
                    })
                    .then(data => {
                        choferSelect.innerHTML = ''; // Limpiar opciones anteriores
                        if (data.choferes && data.choferes.length > 0) {
                            choferSelect.appendChild(new Option('Seleccione un chofer y vehículo', ''));
                            data.choferes.forEach(chofer => {
                                const option = new Option(chofer.display_name, chofer.id);
                                choferSelect.appendChild(option);
                            });
                            choferSelect.disabled = false;
                        } else {
                            choferSelect.appendChild(new Option('No hay choferes disponibles para este horario', ''));
                            // Mantener deshabilitado si no hay choferes
                        }
                    })
                    .catch(error => {
                        console.error('Error al cargar choferes:', error);
                        choferSelect.innerHTML = '<option value="">Error al cargar choferes</option>';
                        // Mantener deshabilitado en caso de error
                    })
                    .finally(() => {
                        choferLoadingDiv.style.display = 'none';
                    });
            } else {
                choferSelect.disabled = true;
                choferSelect.innerHTML = '<option value="">Seleccione fecha y horas para ver choferes disponibles</option>';
            }
        }

        fechaInput.addEventListener('change', fetchChoferesDisponibles);
        horaInicioInput.addEventListener('change', fetchChoferesDisponibles);
        horaFinInput.addEventListener('change', fetchChoferesDisponibles);

        // Si hay oldInput (por error de validación del backend), intentar cargar choferes
        // y seleccionar el que estaba previamente seleccionado si aún está disponible.
        const oldChoferId = "<%= (typeof oldInput !== 'undefined' && oldInput.chofer_id) ? oldInput.chofer_id : '' %>";
        if (fechaInput.value && horaInicioInput.value && horaFinInput.value) {
            // Guardamos el valor antiguo para re-seleccionarlo después del fetch
            const originalFetchChoferes = fetchChoferesDisponibles;
            const augmentedFetch = () => {
                const currentChoferSelect = document.getElementById('chofer_id'); // Re-obtener el select
                const originalOnChange = currentChoferSelect.onchange; // Guardar cualquier listener

                originalFetchChoferes(); // Llama a la función original

                // Esperar a que las opciones se carguen
                const observer = new MutationObserver((mutationsList, observer) => {
                    for(const mutation of mutationsList) {
                        if (mutation.type === 'childList') {
                             // Verificar si el oldChoferId está entre las nuevas opciones
                            const optionExists = Array.from(currentChoferSelect.options).some(opt => opt.value === oldChoferId);
                            if (optionExists) {
                                currentChoferSelect.value = oldChoferId;
                            }
                            if (currentChoferSelect.options.length > 1 && currentChoferSelect.options[0].value !== "") { // Asegura que no sea solo "cargando" o "error"
                                observer.disconnect(); // Dejar de observar una vez que las opciones están pobladas
                                if (originalOnChange) currentChoferSelect.onchange = originalOnChange; // Restaurar listener
                            }
                            break;
                        }
                    }
                });
                observer.observe(currentChoferSelect, { childList: true });
            };
            augmentedFetch();
        }
    });
</script>
